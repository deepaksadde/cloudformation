AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AWS CloudFormation template to create ECS Cluster with spot instances
Parameters:
  EcsClusterName:
    Type: String
    Description: >
      Specifies the ECS Cluster Name 
    Default: default
  EcsAmiId:
    Type: String
    Description: Specifies the AMI ID for your container instances.
    Default: ami-06a91bf9cd2b9a57a
  EcsInstanceType:
    AllowedValues:
    - t3.nano
    - t3.micro
    Default: t3.nano
    Description: EC2 instance type to use for ECS cluster
    Type: String
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: >
      Optional - Specifies the name of an existing Amazon EC2 key pair
      to enable SSH access to the EC2 instances in your cluster.
    Default: ''
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: >
      Optional - Specifies the ID of an existing VPC in which to launch
      your container instances. 
    Default: ''
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: >
      Optional - Specifies the ID of an existing Subnet in given VPC 
    Default: ''
  SecurityGroupId:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: >
      Optional - Specifies the ID of an existing Security group in given VPC 
    Default: ''
  AsgMaxSize:
    Type: Number
    Description: >
      Specifies the number of instances to launch and register to the cluster.
      Defaults to 1.
    Default: '2'
  IamRoleInstanceProfile:
    Type: String
    Description: >
      Specifies the Name or the Amazon Resource Name (ARN) of the instance
      profile associated with the IAM role for the instance
    Default: 'arn:aws:iam::647587844964:instance-profile/EC2containerInstancerole'
  RootEbsVolumeSize:
    Type: Number
    Description: >
      Optional - Specifies the Size in GBs of the root EBS volume
    Default: 30
  EbsVolumeSize:
    Type: Number
    Description: >
      Optional - Specifies the Size in GBs of the data storage EBS volume used by the Docker in the AL1 ECS-optimized AMI
    Default: 22
  EbsVolumeType:
    Type: String
    Description: Optional - Specifies the Type of (Amazon EBS) volume
    Default: ''
    AllowedValues:
      - ''
      - standard
      - io1
      - gp2
      - sc1
      - st1
    ConstraintDescription: Must be a valid EC2 volume type.
  RootDeviceName:
    Type: String
    Description: Optional - Specifies the device mapping for the root EBS volume.
    Default: /dev/xvda
  DeviceName:
    Type: String
    Description: Optional - Specifies the device mapping for the EBS volume used for data storage. Only applicable to AL1.
    Default: /dev/sdc
  UseSpot:
    Type: String
    Default: 'true'
  IamSpotFleetRoleArn:
    Type: String
    Default: 'arn:aws:iam::647587844964:role/aws-service-role/spotfleet.amazonaws.com/AWSServiceRoleForEC2SpotFleet'
  SpotPrice:
    Type: String
    Default: '0.004'
  SpotAllocationStrategy:
    Type: String
    Default: 'diversified'
    AllowedValues:
      - 'lowestPrice'
      - 'diversified'
  ConfigureRootVolume:
    Type: String
    Description: Optional - Specifies if there should be customization of the root volume
    Default: 'false'
  ConfigureDataVolume:
    Type: String
    Description: Optional - Specifies if there should be customization of the data volume
    Default: 'false'
Conditions:
  CreateEC2LCWithKeyPair:
    !Not [!Equals [!Ref KeyName, '']]
  SetEndpointToECSAgent:
    !Not [!Equals [!Ref EcsEndpoint, '']]
  CreateWithSpot: !Equals [!Ref UseSpot, 'true']
  CreateWithASG: !Not [!Condition CreateWithSpot]
  CreateWithSpotPrice: !Not [!Equals [!Ref SpotPrice, '']]
  IsConfiguringRootVolume: !Equals [!Ref ConfigureRootVolume, 'true']
  IsConfiguringDataVolume: !Equals [!Ref ConfigureDataVolume, 'true']
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Ref EcsClusterName 
  cloudWatchLogsGroup:
    Properties:
      RetentionInDays: 7
    Type: AWS::Logs::LogGroup      
  EcsInstanceLc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Condition: CreateWithASG
    Properties:
      ImageId: !Ref EcsAmiId
      InstanceType:  !Ref EcsInstanceType 
      AssociatePublicIpAddress:  !Ref "AWS::NoValue"
      IamInstanceProfile: !Ref IamRoleInstanceProfile
      KeyName: !If [ CreateEC2LCWithKeyPair, !Ref KeyName, !Ref "AWS::NoValue" ]
      SecurityGroups: !Ref SecurityGroupId 
      BlockDeviceMappings:
        - !If
          - IsConfiguringRootVolume
          - DeviceName: !Ref RootDeviceName
            Ebs:
              VolumeSize: !Ref RootEbsVolumeSize
              VolumeType: !Ref EbsVolumeType
          - !Ref AWS::NoValue
        - !If
          - IsConfiguringDataVolume
          - DeviceName: !Ref DeviceName
            Ebs:
              VolumeSize: !Ref EbsVolumeSize
              VolumeType: !Ref EbsVolumeType
          - !Ref AWS::NoValue
      UserData:  !Ref "AWS::NoValue"
        
  EcsInstanceAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: CreateWithASG
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchConfigurationName: !Ref EcsInstanceLc
      MinSize: '1'
      MaxSize: !Ref AsgMaxSize
      DesiredCapacity: !Ref AsgMaxSize
      Tags:
        -
          Key: Name
          Value: !Sub "ECS Instance - ${AWS::StackName}"
          PropagateAtLaunch: true
        -
          Key: Description
          Value: "This instance is the part of the Auto Scaling group which was created through ECS Console"
          PropagateAtLaunch: true
  EcsSpotFleet:
    Condition: CreateWithSpot
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: !Ref SpotAllocationStrategy
        IamFleetRole: !Ref IamSpotFleetRoleArn
        TargetCapacity: !Ref AsgMaxSize
        SpotPrice: !If [ CreateWithSpotPrice, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
        TerminateInstancesWithExpiration: true
        LaunchSpecifications: 
            - IamInstanceProfile:
                Arn: !Ref IamRoleInstanceProfile
              ImageId: !Ref EcsAmiId
              InstanceType: !Ref EcsInstanceType 
              KeyName:  !Ref KeyName
              Monitoring:
                Enabled: true
              SecurityGroups: 
                   - GroupId:  !Select [0, !Ref SecurityGroupId]
                   - GroupId:  !Select [1, !Ref SecurityGroupId]
              SubnetId: !Ref SubnetIds
              BlockDeviceMappings:
                    - DeviceName: !Ref DeviceName
                      Ebs:
                       VolumeSize: !Ref EbsVolumeSize
                       VolumeType: !Ref EbsVolumeType
              UserData:
                Fn::Base64: !Sub |
                        #!/bin/bash
                        export PATH=/usr/local/bin:$PATH
                        yum -y --security update
                        yum -y install jq
                        easy_install pip
                        pip install awscli
                        aws configure set default.region ${AWS::Region}
                        echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                        echo ECS_BACKEND_HOST= >> /etc/ecs/ecs.config

                        cat <<EOF > /tmp/awslogs.conf
                        [general]
                        state_file = /var/awslogs/state/agent-state

                        [/var/log/dmesg]
                        file = /var/log/dmesg
                        log_group_name = ${cloudWatchLogsGroup}
                        log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/dmesg
                        initial_position = start_of_file

                        [/var/log/messages]
                        file = /var/log/messages
                        log_group_name = ${cloudWatchLogsGroup}
                        log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/messages
                        datetime_format = %b %d %H:%M:%S
                        initial_position = start_of_file

                        [/var/log/docker]
                        file = /var/log/docker
                        log_group_name = ${cloudWatchLogsGroup}
                        log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/docker
                        datetime_format = %Y-%m-%dT%H:%M:%S.%f
                        initial_position = start_of_file

                        [/var/log/ecs/ecs-init.log]
                        file = /var/log/ecs/ecs-init.log.*
                        log_group_name = ${cloudWatchLogsGroup}
                        log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-init.log
                        datetime_format = %Y-%m-%dT%H:%M:%SZ
                        initial_position = start_of_file

                        [/var/log/ecs/ecs-agent.log]
                        file = /var/log/ecs/ecs-agent.log.*
                        log_group_name = ${cloudWatchLogsGroup}
                        log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-agent.log
                        datetime_format = %Y-%m-%dT%H:%M:%SZ
                        initial_position = start_of_file

                        [/var/log/ecs/audit.log]
                        file = /var/log/ecs/audit.log.*
                        log_group_name = ${cloudWatchLogsGroup}
                        log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/audit.log
                        datetime_format = %Y-%m-%dT%H:%M:%SZ
                        initial_position = start_of_file
                        EOF

                        cd /tmp && curl -sO https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
                        python /tmp/awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/awslogs.conf

                        cat <<EOF > /etc/init/cloudwatch-logs-start.conf
                        description "Configure and start CloudWatch Logs agent on Amazon ECS container instance"
                        author "Amazon Web Services"
                        start on started ecs
                        script
                        exec 2>>/var/log/cloudwatch-logs-start.log
                        set -x
                        until curl -s http://localhost:51678/v1/metadata; do sleep 1; done
                        ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr -d \")
                        CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn | tr -d \")
                        sed -i "s|%ECS_CLUSTER|\$ECS_CLUSTER|g" /var/awslogs/etc/awslogs.conf
                        sed -i "s|%CONTAINER_INSTANCE|\$CONTAINER_INSTANCE|g" /var/awslogs/etc/awslogs.conf
                        chkconfig awslogs on
                        service awslogs start
                        end script
                        EOF

                        cat <<EOF > /etc/init/spot-instance-termination-notice-handler.conf
                        description "Start spot instance termination handler monitoring script"
                        author "Amazon Web Services"
                        start on started ecs
                        script
                        echo \$\$ > /var/run/spot-instance-termination-notice-handler.pid
                        exec /usr/local/bin/spot-instance-termination-notice-handler.sh
                        end script
                        pre-start script
                        logger "[spot-instance-termination-notice-handler.sh]: spot instance termination notice handler started"
                        end script
                        EOF

                        cat <<EOF > /usr/local/bin/spot-instance-termination-notice-handler.sh
                        #!/bin/bash
                        while sleep 5; do
                        if [ -z \$(curl -Isf http://169.254.169.254/latest/meta-data/spot/termination-time)];
                        then
                        /bin/false
                        else
                        logger "[spot-instance-termination-notice-handler.sh]: spot instance termination notice detected"
                        STATUS=DRAINING
                        ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr -d \")
                        CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn | tr -d \")
                        logger "[spot-instance-termination-notice-handler.sh]: putting instance in state $STATUS"
                        logger "[spot-instance-termination-notice-handler.sh]: running: /bin/aws ecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances $CONTAINER_INSTANCE --status \$STATUS"
                        /bin/aws ecs update-container-instances-state --cluster $ECS_CLUSTER --container-instances \$CONTAINER_INSTANCE --status \$STATUS
                        logger "[spot-instance-termination-notice-handler.sh]: putting myself to sleep..."
                        sleep 120
                        fi
                        done
                        EOF

                        chmod +x /usr/local/bin/spot-instance-termination-notice-handler.sh'
                      
Outputs:
  EcsInstanceAsgName:
    Condition: CreateWithASG
    Description: Auto Scaling Group Name for ECS Instances
    Value: !Ref EcsInstanceAsg
  EcsSpotFleetRequestId:
      Condition: CreateWithSpot
      Description: Spot Fleet Request for ECS Instances
      Value: !Ref EcsSpotFleet
  UsedByECSCreateCluster:
    Description: Flag used by ECS Create Cluster Wizard
    Value: 'true'
  TemplateVersion:
    Description: The version of the template used by Create Cluster Wizard
    Value: '2.0.0'